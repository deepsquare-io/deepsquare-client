export declare type WrappedModule = {
    ___moduleId: string;
};
export declare function isWrappedModule(value: any): value is WrappedModule;
/**
 * Takes an existing function and wraps all functions and constructors.
 * This allows us to replace the function or constructor after it has been imported into the system under test
 * This will not replace statics on classes or replace constant values in the module
 * @param originalModule
 */
export declare function proxyModule<T>(originalModule: T): WrappedModule & T;
/**
 * Replaces functions or constructors in a previously wrapped module.
 * If a module is not wrapped a warning is logged and no replacements occur
 * @param moduleProxy
 * @param mock
 */
export declare function registerMock<T>(moduleProxy: T, mock: Partial<T>): void;
/**
 * Replaces previously replaced module members
 * @param moduleProxy
 */
export declare function reset<T>(moduleProxy: T): void;
