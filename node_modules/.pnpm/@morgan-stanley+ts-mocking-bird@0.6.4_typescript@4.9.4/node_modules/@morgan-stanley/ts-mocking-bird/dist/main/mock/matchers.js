"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addMatchers = exports.matchers = void 0;
var verifiers_1 = require("./verifiers");
exports.matchers = {
    wasCalled: wasCalled,
    wasCalledOnce: wasCalledOnce,
    wasNotCalled: wasNotCalled,
    wasCalledAtLeastOnce: wasCalledAtLeastOnce,
};
/* istanbul ignore next */
function addMatchers() {
    // jasmine.addMatchers must be called in a before function so this will sometimes throw an error
    try {
        jasmine.addMatchers(exports.matchers);
    }
    catch (e) {
        // NOP
    }
    try {
        expect.extend({
            wasCalled: mapToJestCustomMatcher(wasCalled()),
            wasCalledOnce: mapToJestCustomMatcher(wasCalledOnce()),
            wasNotCalled: mapToJestCustomMatcher(wasNotCalled()),
            wasCalledAtLeastOnce: mapToJestCustomMatcher(wasCalledAtLeastOnce()),
        });
    }
    catch (e) {
        // NOP
    }
}
exports.addMatchers = addMatchers;
/* istanbul ignore next */
function mapToJestCustomMatcher(matcher) {
    return function (context, received) {
        var actual = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            actual[_i - 2] = arguments[_i];
        }
        var result = matcher.compare.apply(matcher, __spreadArray([context, received], actual));
        return {
            pass: result.pass,
            message: typeof result.message === 'function' ? result.message : function () { return result.message || 'failed'; },
        };
    };
}
function wasCalled() {
    return {
        compare: function (actual, times) {
            if (typeof times !== 'number') {
                throw new Error("Expected call count must be passed to wasCalled(times: number). To verify that it was called at least once use wasCalledAtLeastOnce().");
            }
            return verifiers_1.verifyFunctionCalled(times, actual);
        },
    };
}
function wasCalledOnce() {
    return {
        compare: function (actual) {
            return verifiers_1.verifyFunctionCalled(1, actual);
        },
    };
}
function wasNotCalled() {
    return {
        compare: function (actual) {
            return verifiers_1.verifyFunctionCalled(0, actual);
        },
    };
}
function wasCalledAtLeastOnce() {
    return {
        compare: function (actual) {
            return verifiers_1.verifyFunctionCalled(undefined, actual);
        },
    };
}
//# sourceMappingURL=matchers.js.map