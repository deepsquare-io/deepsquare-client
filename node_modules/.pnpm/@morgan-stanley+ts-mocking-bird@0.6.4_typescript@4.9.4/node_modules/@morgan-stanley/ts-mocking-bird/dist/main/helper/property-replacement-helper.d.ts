interface IImportReplacement<T extends {}> {
    package: T;
    mocks: Partial<T>;
}
/**
 * Replaces properties (or functions) in the provided object
 * Replacement is done in a call to 'beforeAll'.
 * Properties are reverted to the original value in a call to 'afterAll'
 *
 * @param target The original object. Could be an import: 'import * as myImport from "./importLocation"'
 * @param mocks Object containing functions or properties to replace
 */
export declare function replaceProperties<T>(target: T, mocks: Partial<T>): void;
export declare const mockImports: typeof replaceProperties;
/**
 * Replaces functions, classes or simple values in objects.
 * This runs before each test allowing us to create a new mock object before each test and assert function calls
 *
 * Example:
 *
 * // SUT:
 * import { sampleFunction, SampleClass} from "someImport";
 *
 * export MyClass{
 *      public getValue(){
 *          return new SampleClass();
 *      }
 *
 *      public getOtherValue(){
 *          return sampleFunction();
 *      }
 * }
 *
 * // Test:
 *
 * describe("test", () => {
 *
 * import * as importToMock from "someImport";
 *
 * replacePropertiesBeforeEach(() => {
 *  const mockedClass = Mock.create<SampleClass>().setupFunction("getValue");
 *  const mockedFunction = () => "mockedValue";
 *
 *  return [{package: importToMock, mocks: {SampleClass: mockedClass.mockConstructor, sampleFunction: mockedFunction}}];
 * });
 *
 * })
 *
 * @param callback a function used to setup your mocks and to return an array of import replacements
 */
export declare function replacePropertiesBeforeEach(callback: () => IImportReplacement<any>[]): void;
export declare const mockImportsBeforeEach: typeof replacePropertiesBeforeEach;
export {};
