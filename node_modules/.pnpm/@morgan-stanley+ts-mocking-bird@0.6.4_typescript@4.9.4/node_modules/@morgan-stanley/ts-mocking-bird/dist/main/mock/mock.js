"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mock = void 0;
var matchers_1 = require("./matchers");
var operators_1 = require("./operators");
var verifiers_1 = require("./verifiers");
var Mock = /** @class */ (function () {
    function Mock() {
    }
    Mock.create = function () {
        matchers_1.addMatchers();
        var mocked = {
            functionCallLookup: {},
            setterCallLookup: {},
            getterCallLookup: {},
            staticFunctionCallLookup: {},
            staticSetterCallLookup: {},
            staticGetterCallLookup: {},
            functionReplacementLookup: {},
            mock: {},
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            mockConstructor: (function () {
                var _args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    _args[_i] = arguments[_i];
                }
            }),
            setup: function () {
                var operators = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    operators[_i] = arguments[_i];
                }
                var operatorMocked = mocked;
                operators.forEach(function (operator) { return (operatorMocked = operator(mocked)); });
                return operatorMocked;
            },
            setupFunction: function (functionName, mockFunction) {
                operators_1.setupFunction(functionName, mockFunction)(mocked);
                return mocked.withFunction(functionName);
            },
            setupProperty: function (propertyName, value) {
                operators_1.setupProperty(propertyName, value)(mocked);
                return mocked.withGetter(propertyName);
            },
            defineProperty: function (propertyName, getter, setter) {
                operators_1.defineProperty(propertyName, getter, setter)(mocked);
                return mocked.withGetter(propertyName);
            },
            setupStaticFunction: function (functionName, mockFunction) {
                operators_1.setupStaticFunction(functionName, mockFunction)(mocked);
                return mocked.withStaticFunction(functionName);
            },
            setupStaticProperty: function (propertyName, value) {
                operators_1.setupStaticProperty(propertyName, value)(mocked);
                return mocked.withStaticGetter(propertyName);
            },
            defineStaticProperty: function (propertyName, getter, setter) {
                operators_1.defineStaticProperty(propertyName, getter, setter)(mocked);
                return mocked.withStaticGetter(propertyName);
            },
            withFunction: function (functionName) {
                return verifiers_1.createFunctionParameterVerifier(mocked, 'function', functionName);
            },
            withSetter: function (functionName) {
                return verifiers_1.createFunctionParameterVerifier(mocked, 'setter', functionName);
            },
            withGetter: function (functionName) { return verifiers_1.createFunctionVerifier(mocked, 'getter', functionName); },
            withStaticFunction: function (functionName) {
                return verifiers_1.createFunctionParameterVerifier(mocked, 'staticFunction', functionName);
            },
            withStaticSetter: function (functionName) {
                return verifiers_1.createFunctionParameterVerifier(mocked, 'staticSetter', functionName);
            },
            withStaticGetter: function (functionName) {
                return verifiers_1.createFunctionVerifier(mocked, 'staticGetter', functionName);
            },
        };
        mocked.mockConstructor.prototype = mocked.mock;
        return mocked;
    };
    return Mock;
}());
exports.Mock = Mock;
//# sourceMappingURL=mock.js.map