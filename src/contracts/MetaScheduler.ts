/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type JobDefinitionStruct = {
  gpuPerTask: PromiseOrValue<BigNumberish>;
  memPerCpu: PromiseOrValue<BigNumberish>;
  cpuPerTask: PromiseOrValue<BigNumberish>;
  ntasks: PromiseOrValue<BigNumberish>;
  batchLocationHash: PromiseOrValue<string>;
  storageType: PromiseOrValue<BigNumberish>;
};

export type JobDefinitionStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  number
] & {
  gpuPerTask: BigNumber;
  memPerCpu: BigNumber;
  cpuPerTask: BigNumber;
  ntasks: BigNumber;
  batchLocationHash: string;
  storageType: number;
};

export type JobCostStruct = {
  maxCost: PromiseOrValue<BigNumberish>;
  finalCost: PromiseOrValue<BigNumberish>;
  autoTopUp: PromiseOrValue<boolean>;
};

export type JobCostStructOutput = [BigNumber, BigNumber, boolean] & {
  maxCost: BigNumber;
  finalCost: BigNumber;
  autoTopUp: boolean;
};

export type JobTimeStruct = {
  start: PromiseOrValue<BigNumberish>;
  end: PromiseOrValue<BigNumberish>;
  cancelRequestTimestamp: PromiseOrValue<BigNumberish>;
  blockNumberStateChange: PromiseOrValue<BigNumberish>;
};

export type JobTimeStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  start: BigNumber;
  end: BigNumber;
  cancelRequestTimestamp: BigNumber;
  blockNumberStateChange: BigNumber;
};

export interface MetaSchedulerInterface extends utils.Interface {
  functions: {
    "BILL_DURATION_DELTA_MINUTE()": FunctionFragment;
    "BILL_TIME_CONTROL_DELTA_S()": FunctionFragment;
    "CANCELLATION_FEE_MINUTE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "METASCHEDULER_ROLE()": FunctionFragment;
    "MINIMUM_AMOUNT()": FunctionFragment;
    "TOP_UP_SLICE_DURATION_MIN()": FunctionFragment;
    "cancelJob(bytes32)": FunctionFragment;
    "claimJob(bytes32,address)": FunctionFragment;
    "claimJobTimeout()": FunctionFragment;
    "claimNextCancellingJob()": FunctionFragment;
    "claimNextJob()": FunctionFragment;
    "credit()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getUnlockBalance(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasCancellingJob(address)": FunctionFragment;
    "hasNextJob(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hotJobList(uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "jobIdCounter()": FunctionFragment;
    "jobs(bytes32)": FunctionFragment;
    "metaSchedule(bytes32,address)": FunctionFragment;
    "providerCancellingJobsQueues(address)": FunctionFragment;
    "providerClaimableJobsQueues(address)": FunctionFragment;
    "providerManager()": FunctionFragment;
    "providerSetJobStatus(bytes32,uint8,uint64)": FunctionFragment;
    "providerTimeoutJobsQueues(address)": FunctionFragment;
    "refuseJob(bytes32)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestNewJob((uint64,uint64,uint64,uint64,string,uint8),uint256,bytes32,bool)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAutoTopUpJob(bytes32,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "topUpJob(bytes32,uint256)": FunctionFragment;
    "topUpJobSlice(bytes32)": FunctionFragment;
    "updateJobsStatus()": FunctionFragment;
    "wallet2JobId(address,uint256)": FunctionFragment;
    "wallet2LockedBalance(address)": FunctionFragment;
    "wallet2TotalBalance(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAdmin(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BILL_DURATION_DELTA_MINUTE"
      | "BILL_TIME_CONTROL_DELTA_S"
      | "CANCELLATION_FEE_MINUTE"
      | "DEFAULT_ADMIN_ROLE"
      | "METASCHEDULER_ROLE"
      | "MINIMUM_AMOUNT"
      | "TOP_UP_SLICE_DURATION_MIN"
      | "cancelJob"
      | "claimJob"
      | "claimJobTimeout"
      | "claimNextCancellingJob"
      | "claimNextJob"
      | "credit"
      | "deposit"
      | "getRoleAdmin"
      | "getUnlockBalance"
      | "grantRole"
      | "hasCancellingJob"
      | "hasNextJob"
      | "hasRole"
      | "hotJobList"
      | "initialize"
      | "jobIdCounter"
      | "jobs"
      | "metaSchedule"
      | "providerCancellingJobsQueues"
      | "providerClaimableJobsQueues"
      | "providerManager"
      | "providerSetJobStatus"
      | "providerTimeoutJobsQueues"
      | "refuseJob"
      | "renounceRole"
      | "requestNewJob"
      | "revokeRole"
      | "setAutoTopUpJob"
      | "supportsInterface"
      | "topUpJob"
      | "topUpJobSlice"
      | "updateJobsStatus"
      | "wallet2JobId"
      | "wallet2LockedBalance"
      | "wallet2TotalBalance"
      | "withdraw"
      | "withdrawAdmin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BILL_DURATION_DELTA_MINUTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BILL_TIME_CONTROL_DELTA_S",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CANCELLATION_FEE_MINUTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "METASCHEDULER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOP_UP_SLICE_DURATION_MIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelJob",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimJob",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimJobTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimNextCancellingJob",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimNextJob",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "credit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlockBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCancellingJob",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasNextJob",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hotJobList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "jobIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jobs",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "metaSchedule",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "providerCancellingJobsQueues",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "providerClaimableJobsQueues",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "providerManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "providerSetJobStatus",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "providerTimeoutJobsQueues",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "refuseJob",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestNewJob",
    values: [
      JobDefinitionStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutoTopUpJob",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "topUpJob",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "topUpJobSlice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateJobsStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wallet2JobId",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "wallet2LockedBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wallet2TotalBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAdmin",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BILL_DURATION_DELTA_MINUTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BILL_TIME_CONTROL_DELTA_S",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CANCELLATION_FEE_MINUTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "METASCHEDULER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOP_UP_SLICE_DURATION_MIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimJobTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimNextCancellingJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimNextJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "credit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasCancellingJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasNextJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hotJobList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jobIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "metaSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providerCancellingJobsQueues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providerClaimableJobsQueues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providerManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providerSetJobStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providerTimeoutJobsQueues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refuseJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestNewJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAutoTopUpJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "topUpJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "topUpJobSlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateJobsStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wallet2JobId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wallet2LockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wallet2TotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAdmin",
    data: BytesLike
  ): Result;

  events: {
    "ClaimJobEvent(address,address,bytes32,uint64,tuple)": EventFragment;
    "ClaimNextCancellingJobEvent(address,address,bytes32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "JobRefusedEvent(bytes32,address)": EventFragment;
    "NewJobRequestEvent(bytes32,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimJobEvent"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ClaimNextCancellingJobEvent"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobRefusedEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewJobRequestEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface ClaimJobEventEventObject {
  customerAddr: string;
  providerAddr: string;
  jobId: string;
  maxDurationMinute: BigNumber;
  jobDefinition: JobDefinitionStructOutput;
}
export type ClaimJobEventEvent = TypedEvent<
  [string, string, string, BigNumber, JobDefinitionStructOutput],
  ClaimJobEventEventObject
>;

export type ClaimJobEventEventFilter = TypedEventFilter<ClaimJobEventEvent>;

export interface ClaimNextCancellingJobEventEventObject {
  customerAddr: string;
  providerAddr: string;
  jobId: string;
}
export type ClaimNextCancellingJobEventEvent = TypedEvent<
  [string, string, string],
  ClaimNextCancellingJobEventEventObject
>;

export type ClaimNextCancellingJobEventEventFilter =
  TypedEventFilter<ClaimNextCancellingJobEventEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface JobRefusedEventEventObject {
  _jobId: string;
  _providerAddr: string;
}
export type JobRefusedEventEvent = TypedEvent<
  [string, string],
  JobRefusedEventEventObject
>;

export type JobRefusedEventEventFilter = TypedEventFilter<JobRefusedEventEvent>;

export interface NewJobRequestEventEventObject {
  _jobId: string;
  _customerAddr: string;
}
export type NewJobRequestEventEvent = TypedEvent<
  [string, string],
  NewJobRequestEventEventObject
>;

export type NewJobRequestEventEventFilter =
  TypedEventFilter<NewJobRequestEventEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface MetaScheduler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetaSchedulerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BILL_DURATION_DELTA_MINUTE(overrides?: CallOverrides): Promise<[BigNumber]>;

    BILL_TIME_CONTROL_DELTA_S(overrides?: CallOverrides): Promise<[BigNumber]>;

    CANCELLATION_FEE_MINUTE(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    METASCHEDULER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MINIMUM_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOP_UP_SLICE_DURATION_MIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelJob(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimJob(
      _jobId: PromiseOrValue<BytesLike>,
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimJobTimeout(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimNextCancellingJob(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimNextJob(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    credit(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUnlockBalance(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasCancellingJob(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasNextJob(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hotJobList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _credit: PromiseOrValue<string>,
      _providerManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    jobIdCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    jobs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        string,
        JobDefinitionStructOutput,
        boolean,
        JobCostStructOutput,
        JobTimeStructOutput,
        string,
        boolean
      ] & {
        jobId: string;
        status: number;
        customerAddr: string;
        providerAddr: string;
        definition: JobDefinitionStructOutput;
        valid: boolean;
        cost: JobCostStructOutput;
        time: JobTimeStructOutput;
        jobName: string;
        hasCancelRequest: boolean;
      }
    >;

    metaSchedule(
      _jobId: PromiseOrValue<BytesLike>,
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    providerCancellingJobsQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _begin: BigNumber; _end: BigNumber }>;

    providerClaimableJobsQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _begin: BigNumber; _end: BigNumber }>;

    providerManager(overrides?: CallOverrides): Promise<[string]>;

    providerSetJobStatus(
      _jobId: PromiseOrValue<BytesLike>,
      _jobStatus: PromiseOrValue<BigNumberish>,
      _jobDurationMinute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    providerTimeoutJobsQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _begin: BigNumber; _end: BigNumber }>;

    refuseJob(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestNewJob(
      _definition: JobDefinitionStruct,
      _maxCost: PromiseOrValue<BigNumberish>,
      _jobName: PromiseOrValue<BytesLike>,
      _autoTopUp: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAutoTopUpJob(
      _jobId: PromiseOrValue<BytesLike>,
      _autoTopUp: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    topUpJob(
      _jobId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    topUpJobSlice(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateJobsStatus(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wallet2JobId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    wallet2LockedBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wallet2TotalBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAdmin(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BILL_DURATION_DELTA_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;

  BILL_TIME_CONTROL_DELTA_S(overrides?: CallOverrides): Promise<BigNumber>;

  CANCELLATION_FEE_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  METASCHEDULER_ROLE(overrides?: CallOverrides): Promise<string>;

  MINIMUM_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  TOP_UP_SLICE_DURATION_MIN(overrides?: CallOverrides): Promise<BigNumber>;

  cancelJob(
    _jobId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimJob(
    _jobId: PromiseOrValue<BytesLike>,
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimJobTimeout(overrides?: CallOverrides): Promise<BigNumber>;

  claimNextCancellingJob(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimNextJob(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  credit(overrides?: CallOverrides): Promise<string>;

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUnlockBalance(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasCancellingJob(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasNextJob(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hotJobList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _credit: PromiseOrValue<string>,
    _providerManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  jobIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  jobs(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      string,
      string,
      JobDefinitionStructOutput,
      boolean,
      JobCostStructOutput,
      JobTimeStructOutput,
      string,
      boolean
    ] & {
      jobId: string;
      status: number;
      customerAddr: string;
      providerAddr: string;
      definition: JobDefinitionStructOutput;
      valid: boolean;
      cost: JobCostStructOutput;
      time: JobTimeStructOutput;
      jobName: string;
      hasCancelRequest: boolean;
    }
  >;

  metaSchedule(
    _jobId: PromiseOrValue<BytesLike>,
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  providerCancellingJobsQueues(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { _begin: BigNumber; _end: BigNumber }>;

  providerClaimableJobsQueues(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { _begin: BigNumber; _end: BigNumber }>;

  providerManager(overrides?: CallOverrides): Promise<string>;

  providerSetJobStatus(
    _jobId: PromiseOrValue<BytesLike>,
    _jobStatus: PromiseOrValue<BigNumberish>,
    _jobDurationMinute: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  providerTimeoutJobsQueues(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { _begin: BigNumber; _end: BigNumber }>;

  refuseJob(
    _jobId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestNewJob(
    _definition: JobDefinitionStruct,
    _maxCost: PromiseOrValue<BigNumberish>,
    _jobName: PromiseOrValue<BytesLike>,
    _autoTopUp: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAutoTopUpJob(
    _jobId: PromiseOrValue<BytesLike>,
    _autoTopUp: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  topUpJob(
    _jobId: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  topUpJobSlice(
    _jobId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateJobsStatus(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wallet2JobId(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  wallet2LockedBalance(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wallet2TotalBalance(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAdmin(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BILL_DURATION_DELTA_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;

    BILL_TIME_CONTROL_DELTA_S(overrides?: CallOverrides): Promise<BigNumber>;

    CANCELLATION_FEE_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    METASCHEDULER_ROLE(overrides?: CallOverrides): Promise<string>;

    MINIMUM_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    TOP_UP_SLICE_DURATION_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    cancelJob(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimJob(
      _jobId: PromiseOrValue<BytesLike>,
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimJobTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    claimNextCancellingJob(overrides?: CallOverrides): Promise<void>;

    claimNextJob(overrides?: CallOverrides): Promise<void>;

    credit(overrides?: CallOverrides): Promise<string>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUnlockBalance(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasCancellingJob(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasNextJob(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hotJobList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _credit: PromiseOrValue<string>,
      _providerManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    jobIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    jobs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        string,
        JobDefinitionStructOutput,
        boolean,
        JobCostStructOutput,
        JobTimeStructOutput,
        string,
        boolean
      ] & {
        jobId: string;
        status: number;
        customerAddr: string;
        providerAddr: string;
        definition: JobDefinitionStructOutput;
        valid: boolean;
        cost: JobCostStructOutput;
        time: JobTimeStructOutput;
        jobName: string;
        hasCancelRequest: boolean;
      }
    >;

    metaSchedule(
      _jobId: PromiseOrValue<BytesLike>,
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    providerCancellingJobsQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _begin: BigNumber; _end: BigNumber }>;

    providerClaimableJobsQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _begin: BigNumber; _end: BigNumber }>;

    providerManager(overrides?: CallOverrides): Promise<string>;

    providerSetJobStatus(
      _jobId: PromiseOrValue<BytesLike>,
      _jobStatus: PromiseOrValue<BigNumberish>,
      _jobDurationMinute: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    providerTimeoutJobsQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _begin: BigNumber; _end: BigNumber }>;

    refuseJob(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestNewJob(
      _definition: JobDefinitionStruct,
      _maxCost: PromiseOrValue<BigNumberish>,
      _jobName: PromiseOrValue<BytesLike>,
      _autoTopUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAutoTopUpJob(
      _jobId: PromiseOrValue<BytesLike>,
      _autoTopUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    topUpJob(
      _jobId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    topUpJobSlice(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateJobsStatus(overrides?: CallOverrides): Promise<void>;

    wallet2JobId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    wallet2LockedBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wallet2TotalBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAdmin(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimJobEvent(address,address,bytes32,uint64,tuple)"(
      customerAddr?: null,
      providerAddr?: null,
      jobId?: null,
      maxDurationMinute?: null,
      jobDefinition?: null
    ): ClaimJobEventEventFilter;
    ClaimJobEvent(
      customerAddr?: null,
      providerAddr?: null,
      jobId?: null,
      maxDurationMinute?: null,
      jobDefinition?: null
    ): ClaimJobEventEventFilter;

    "ClaimNextCancellingJobEvent(address,address,bytes32)"(
      customerAddr?: null,
      providerAddr?: null,
      jobId?: null
    ): ClaimNextCancellingJobEventEventFilter;
    ClaimNextCancellingJobEvent(
      customerAddr?: null,
      providerAddr?: null,
      jobId?: null
    ): ClaimNextCancellingJobEventEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "JobRefusedEvent(bytes32,address)"(
      _jobId?: null,
      _providerAddr?: null
    ): JobRefusedEventEventFilter;
    JobRefusedEvent(
      _jobId?: null,
      _providerAddr?: null
    ): JobRefusedEventEventFilter;

    "NewJobRequestEvent(bytes32,address)"(
      _jobId?: null,
      _customerAddr?: null
    ): NewJobRequestEventEventFilter;
    NewJobRequestEvent(
      _jobId?: null,
      _customerAddr?: null
    ): NewJobRequestEventEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    BILL_DURATION_DELTA_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;

    BILL_TIME_CONTROL_DELTA_S(overrides?: CallOverrides): Promise<BigNumber>;

    CANCELLATION_FEE_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    METASCHEDULER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    TOP_UP_SLICE_DURATION_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    cancelJob(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimJob(
      _jobId: PromiseOrValue<BytesLike>,
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimJobTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    claimNextCancellingJob(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimNextJob(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    credit(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnlockBalance(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasCancellingJob(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasNextJob(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hotJobList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _credit: PromiseOrValue<string>,
      _providerManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    jobIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    jobs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metaSchedule(
      _jobId: PromiseOrValue<BytesLike>,
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    providerCancellingJobsQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providerClaimableJobsQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providerManager(overrides?: CallOverrides): Promise<BigNumber>;

    providerSetJobStatus(
      _jobId: PromiseOrValue<BytesLike>,
      _jobStatus: PromiseOrValue<BigNumberish>,
      _jobDurationMinute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    providerTimeoutJobsQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refuseJob(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestNewJob(
      _definition: JobDefinitionStruct,
      _maxCost: PromiseOrValue<BigNumberish>,
      _jobName: PromiseOrValue<BytesLike>,
      _autoTopUp: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAutoTopUpJob(
      _jobId: PromiseOrValue<BytesLike>,
      _autoTopUp: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topUpJob(
      _jobId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    topUpJobSlice(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateJobsStatus(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wallet2JobId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wallet2LockedBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wallet2TotalBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAdmin(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BILL_DURATION_DELTA_MINUTE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BILL_TIME_CONTROL_DELTA_S(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CANCELLATION_FEE_MINUTE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    METASCHEDULER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINIMUM_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOP_UP_SLICE_DURATION_MIN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelJob(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimJob(
      _jobId: PromiseOrValue<BytesLike>,
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimJobTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimNextCancellingJob(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimNextJob(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    credit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnlockBalance(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasCancellingJob(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasNextJob(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hotJobList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _credit: PromiseOrValue<string>,
      _providerManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    jobIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jobs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metaSchedule(
      _jobId: PromiseOrValue<BytesLike>,
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    providerCancellingJobsQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    providerClaimableJobsQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    providerManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    providerSetJobStatus(
      _jobId: PromiseOrValue<BytesLike>,
      _jobStatus: PromiseOrValue<BigNumberish>,
      _jobDurationMinute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    providerTimeoutJobsQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refuseJob(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestNewJob(
      _definition: JobDefinitionStruct,
      _maxCost: PromiseOrValue<BigNumberish>,
      _jobName: PromiseOrValue<BytesLike>,
      _autoTopUp: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAutoTopUpJob(
      _jobId: PromiseOrValue<BytesLike>,
      _autoTopUp: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    topUpJob(
      _jobId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    topUpJobSlice(
      _jobId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateJobsStatus(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wallet2JobId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wallet2LockedBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wallet2TotalBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAdmin(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
