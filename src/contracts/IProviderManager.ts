/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type LabelStruct = {
  key: PromiseOrValue<string>;
  value: PromiseOrValue<string>;
};

export type LabelStructOutput = [string, string] & {
  key: string;
  value: string;
};

export type ProviderHardwareStruct = {
  nodes: PromiseOrValue<BigNumberish>;
  gpus: PromiseOrValue<BigNumberish>;
  cpus: PromiseOrValue<BigNumberish>;
  mem: PromiseOrValue<BigNumberish>;
};

export type ProviderHardwareStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & { nodes: BigNumber; gpus: BigNumber; cpus: BigNumber; mem: BigNumber };

export type ProviderPricesStruct = {
  gpuPricePerMin: PromiseOrValue<BigNumberish>;
  cpuPricePerMin: PromiseOrValue<BigNumberish>;
  memPricePerMin: PromiseOrValue<BigNumberish>;
};

export type ProviderPricesStructOutput = [BigNumber, BigNumber, BigNumber] & {
  gpuPricePerMin: BigNumber;
  cpuPricePerMin: BigNumber;
  memPricePerMin: BigNumber;
};

export interface IProviderManagerInterface extends utils.Interface {
  functions: {
    "approve(address)": FunctionFragment;
    "ban(address)": FunctionFragment;
    "getAllTag(address)": FunctionFragment;
    "getJobCount(address)": FunctionFragment;
    "getProviderHardware(address)": FunctionFragment;
    "getProviderPrices(address)": FunctionFragment;
    "getProviderStatus(address)": FunctionFragment;
    "getProviderWalletAddr(address)": FunctionFragment;
    "getTag(address,string)": FunctionFragment;
    "hasJoined(address)": FunctionFragment;
    "incJobCount(address)": FunctionFragment;
    "kick(address)": FunctionFragment;
    "register(uint64,uint64,uint64,uint64,uint256,uint256,uint256,(string,string)[])": FunctionFragment;
    "registerProvider(address,uint64,uint64,uint64,uint64,uint256,uint256,uint256,(string,string)[])": FunctionFragment;
    "reinstate(address)": FunctionFragment;
    "removeProvider(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "ban"
      | "getAllTag"
      | "getJobCount"
      | "getProviderHardware"
      | "getProviderPrices"
      | "getProviderStatus"
      | "getProviderWalletAddr"
      | "getTag"
      | "hasJoined"
      | "incJobCount"
      | "kick"
      | "register"
      | "registerProvider"
      | "reinstate"
      | "removeProvider"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ban",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTag",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderHardware",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderPrices",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderWalletAddr",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTag",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasJoined",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "incJobCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "kick",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      LabelStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProvider",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      LabelStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reinstate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProvider",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ban", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAllTag", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getJobCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderHardware",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderWalletAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasJoined", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incJobCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reinstate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeProvider",
    data: BytesLike
  ): Result;

  events: {
    "HardwareUpdatedEvent(address)": EventFragment;
    "ToBeApproved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HardwareUpdatedEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ToBeApproved"): EventFragment;
}

export interface HardwareUpdatedEventEventObject {
  _providerAddr: string;
}
export type HardwareUpdatedEventEvent = TypedEvent<
  [string],
  HardwareUpdatedEventEventObject
>;

export type HardwareUpdatedEventEventFilter =
  TypedEventFilter<HardwareUpdatedEventEvent>;

export interface ToBeApprovedEventObject {
  _providerAddr: string;
}
export type ToBeApprovedEvent = TypedEvent<[string], ToBeApprovedEventObject>;

export type ToBeApprovedEventFilter = TypedEventFilter<ToBeApprovedEvent>;

export interface IProviderManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IProviderManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ban(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllTag(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LabelStructOutput[]]>;

    getJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProviderHardware(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ProviderHardwareStructOutput]>;

    getProviderPrices(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ProviderPricesStructOutput]>;

    getProviderStatus(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { _status: number }>;

    getProviderWalletAddr(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { _walletAddr: string }>;

    getTag(
      _providerAddr: PromiseOrValue<string>,
      tagKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasJoined(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    incJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    kick(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    register(
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _labels: LabelStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerProvider(
      _providerAddr: PromiseOrValue<string>,
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _labels: LabelStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reinstate(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeProvider(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ban(
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllTag(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LabelStructOutput[]>;

  getJobCount(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProviderHardware(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ProviderHardwareStructOutput>;

  getProviderPrices(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ProviderPricesStructOutput>;

  getProviderStatus(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getProviderWalletAddr(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTag(
    _providerAddr: PromiseOrValue<string>,
    tagKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  hasJoined(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  incJobCount(
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  kick(
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  register(
    _nNodes: PromiseOrValue<BigNumberish>,
    _gpus: PromiseOrValue<BigNumberish>,
    _cpus: PromiseOrValue<BigNumberish>,
    _mem: PromiseOrValue<BigNumberish>,
    _gpuPricePerMin: PromiseOrValue<BigNumberish>,
    _cpuPricePerMin: PromiseOrValue<BigNumberish>,
    _memPricePerMin: PromiseOrValue<BigNumberish>,
    _labels: LabelStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerProvider(
    _providerAddr: PromiseOrValue<string>,
    _nNodes: PromiseOrValue<BigNumberish>,
    _gpus: PromiseOrValue<BigNumberish>,
    _cpus: PromiseOrValue<BigNumberish>,
    _mem: PromiseOrValue<BigNumberish>,
    _gpuPricePerMin: PromiseOrValue<BigNumberish>,
    _cpuPricePerMin: PromiseOrValue<BigNumberish>,
    _memPricePerMin: PromiseOrValue<BigNumberish>,
    _labels: LabelStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reinstate(
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeProvider(
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ban(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllTag(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LabelStructOutput[]>;

    getJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderHardware(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ProviderHardwareStructOutput>;

    getProviderPrices(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ProviderPricesStructOutput>;

    getProviderStatus(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getProviderWalletAddr(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTag(
      _providerAddr: PromiseOrValue<string>,
      tagKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    hasJoined(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    incJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    kick(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    register(
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _labels: LabelStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerProvider(
      _providerAddr: PromiseOrValue<string>,
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _labels: LabelStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    reinstate(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProvider(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HardwareUpdatedEvent(address)"(
      _providerAddr?: null
    ): HardwareUpdatedEventEventFilter;
    HardwareUpdatedEvent(_providerAddr?: null): HardwareUpdatedEventEventFilter;

    "ToBeApproved(address)"(_providerAddr?: null): ToBeApprovedEventFilter;
    ToBeApproved(_providerAddr?: null): ToBeApprovedEventFilter;
  };

  estimateGas: {
    approve(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ban(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllTag(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderHardware(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderPrices(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderStatus(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderWalletAddr(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTag(
      _providerAddr: PromiseOrValue<string>,
      tagKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasJoined(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    kick(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    register(
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _labels: LabelStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerProvider(
      _providerAddr: PromiseOrValue<string>,
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _labels: LabelStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reinstate(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeProvider(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ban(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllTag(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderHardware(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderPrices(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderStatus(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderWalletAddr(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTag(
      _providerAddr: PromiseOrValue<string>,
      tagKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasJoined(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    kick(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    register(
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _labels: LabelStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerProvider(
      _providerAddr: PromiseOrValue<string>,
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _labels: LabelStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reinstate(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeProvider(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
