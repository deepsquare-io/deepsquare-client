/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type ProviderDefinitionStruct = {
  nodes: PromiseOrValue<BigNumberish>;
  gpus: PromiseOrValue<BigNumberish>;
  gpuPricePerMin: PromiseOrValue<BigNumberish>;
  cpus: PromiseOrValue<BigNumberish>;
  cpuPricePerMin: PromiseOrValue<BigNumberish>;
  mem: PromiseOrValue<BigNumberish>;
  memPricePerMin: PromiseOrValue<BigNumberish>;
};

export type ProviderDefinitionStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  nodes: BigNumber;
  gpus: BigNumber;
  gpuPricePerMin: BigNumber;
  cpus: BigNumber;
  cpuPricePerMin: BigNumber;
  mem: BigNumber;
  memPricePerMin: BigNumber;
};

export type ProviderStruct = {
  addr: PromiseOrValue<string>;
  definition: ProviderDefinitionStruct;
  status: PromiseOrValue<BigNumberish>;
  valid: PromiseOrValue<boolean>;
  jobCount: PromiseOrValue<BigNumberish>;
  pointPrevNode: PromiseOrValue<BigNumberish>;
  pointNextNode: PromiseOrValue<BigNumberish>;
};

export type ProviderStructOutput = [
  string,
  ProviderDefinitionStructOutput,
  number,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  addr: string;
  definition: ProviderDefinitionStructOutput;
  status: number;
  valid: boolean;
  jobCount: BigNumber;
  pointPrevNode: BigNumber;
  pointNextNode: BigNumber;
};

export interface IProviderManagerInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "METASCHEDULER_CONTRACT_ROLE()": FunctionFragment;
    "METASCHEDULER_ROLE()": FunctionFragment;
    "PROVIDER_REGISTRATION_TAX()": FunctionFragment;
    "approve(address)": FunctionFragment;
    "count()": FunctionFragment;
    "getProvider(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasJoined(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "incJobCount(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "kick(address)": FunctionFragment;
    "providerNumber()": FunctionFragment;
    "providers(address)": FunctionFragment;
    "providersLinkedList(uint256)": FunctionFragment;
    "register(uint64,uint64,uint64,uint64,uint64,uint64,uint64)": FunctionFragment;
    "registerProvider(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalJobCount()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "METASCHEDULER_CONTRACT_ROLE"
      | "METASCHEDULER_ROLE"
      | "PROVIDER_REGISTRATION_TAX"
      | "approve"
      | "count"
      | "getProvider"
      | "getRoleAdmin"
      | "grantRole"
      | "hasJoined"
      | "hasRole"
      | "incJobCount"
      | "initialize"
      | "kick"
      | "providerNumber"
      | "providers"
      | "providersLinkedList"
      | "register"
      | "registerProvider"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "totalJobCount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "METASCHEDULER_CONTRACT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "METASCHEDULER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROVIDER_REGISTRATION_TAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasJoined",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "incJobCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kick",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "providerNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "providers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "providersLinkedList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProvider",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalJobCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "METASCHEDULER_CONTRACT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "METASCHEDULER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROVIDER_REGISTRATION_TAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasJoined", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incJobCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "providerNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "providers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "providersLinkedList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalJobCount",
    data: BytesLike
  ): Result;

  events: {
    "HardwareUpdatedEvent(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "ToBeApproved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HardwareUpdatedEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ToBeApproved"): EventFragment;
}

export interface HardwareUpdatedEventEventObject {
  _providerAddr: string;
}
export type HardwareUpdatedEventEvent = TypedEvent<
  [string],
  HardwareUpdatedEventEventObject
>;

export type HardwareUpdatedEventEventFilter =
  TypedEventFilter<HardwareUpdatedEventEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface ToBeApprovedEventObject {
  _providerAddr: string;
}
export type ToBeApprovedEvent = TypedEvent<[string], ToBeApprovedEventObject>;

export type ToBeApprovedEventFilter = TypedEventFilter<ToBeApprovedEvent>;

export interface IProviderManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IProviderManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    METASCHEDULER_CONTRACT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    METASCHEDULER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PROVIDER_REGISTRATION_TAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProvider(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ProviderStructOutput]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasJoined(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    incJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    kick(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    providerNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    providers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        ProviderDefinitionStructOutput,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        addr: string;
        definition: ProviderDefinitionStructOutput;
        status: number;
        valid: boolean;
        jobCount: BigNumber;
        pointPrevNode: BigNumber;
        pointNextNode: BigNumber;
      }
    >;

    providersLinkedList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        ProviderDefinitionStructOutput,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        addr: string;
        definition: ProviderDefinitionStructOutput;
        status: number;
        valid: boolean;
        jobCount: BigNumber;
        pointPrevNode: BigNumber;
        pointNextNode: BigNumber;
      }
    >;

    register(
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerProvider(
      _providerAddr: PromiseOrValue<string>,
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalJobCount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  METASCHEDULER_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

  METASCHEDULER_ROLE(overrides?: CallOverrides): Promise<string>;

  PROVIDER_REGISTRATION_TAX(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  getProvider(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ProviderStructOutput>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasJoined(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  incJobCount(
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  kick(
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  providerNumber(overrides?: CallOverrides): Promise<BigNumber>;

  providers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      ProviderDefinitionStructOutput,
      number,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      addr: string;
      definition: ProviderDefinitionStructOutput;
      status: number;
      valid: boolean;
      jobCount: BigNumber;
      pointPrevNode: BigNumber;
      pointNextNode: BigNumber;
    }
  >;

  providersLinkedList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      ProviderDefinitionStructOutput,
      number,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      addr: string;
      definition: ProviderDefinitionStructOutput;
      status: number;
      valid: boolean;
      jobCount: BigNumber;
      pointPrevNode: BigNumber;
      pointNextNode: BigNumber;
    }
  >;

  register(
    _nNodes: PromiseOrValue<BigNumberish>,
    _gpus: PromiseOrValue<BigNumberish>,
    _cpus: PromiseOrValue<BigNumberish>,
    _mem: PromiseOrValue<BigNumberish>,
    _gpuPricePerMin: PromiseOrValue<BigNumberish>,
    _cpuPricePerMin: PromiseOrValue<BigNumberish>,
    _memPricePerMin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerProvider(
    _providerAddr: PromiseOrValue<string>,
    _nNodes: PromiseOrValue<BigNumberish>,
    _gpus: PromiseOrValue<BigNumberish>,
    _cpus: PromiseOrValue<BigNumberish>,
    _mem: PromiseOrValue<BigNumberish>,
    _gpuPricePerMin: PromiseOrValue<BigNumberish>,
    _cpuPricePerMin: PromiseOrValue<BigNumberish>,
    _memPricePerMin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalJobCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    METASCHEDULER_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

    METASCHEDULER_ROLE(overrides?: CallOverrides): Promise<string>;

    PROVIDER_REGISTRATION_TAX(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    getProvider(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ProviderStructOutput>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasJoined(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    incJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    kick(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    providerNumber(overrides?: CallOverrides): Promise<BigNumber>;

    providers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        ProviderDefinitionStructOutput,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        addr: string;
        definition: ProviderDefinitionStructOutput;
        status: number;
        valid: boolean;
        jobCount: BigNumber;
        pointPrevNode: BigNumber;
        pointNextNode: BigNumber;
      }
    >;

    providersLinkedList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        ProviderDefinitionStructOutput,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        addr: string;
        definition: ProviderDefinitionStructOutput;
        status: number;
        valid: boolean;
        jobCount: BigNumber;
        pointPrevNode: BigNumber;
        pointNextNode: BigNumber;
      }
    >;

    register(
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerProvider(
      _providerAddr: PromiseOrValue<string>,
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalJobCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "HardwareUpdatedEvent(address)"(
      _providerAddr?: null
    ): HardwareUpdatedEventEventFilter;
    HardwareUpdatedEvent(_providerAddr?: null): HardwareUpdatedEventEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "ToBeApproved(address)"(_providerAddr?: null): ToBeApprovedEventFilter;
    ToBeApproved(_providerAddr?: null): ToBeApprovedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    METASCHEDULER_CONTRACT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    METASCHEDULER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PROVIDER_REGISTRATION_TAX(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    getProvider(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasJoined(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    kick(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    providerNumber(overrides?: CallOverrides): Promise<BigNumber>;

    providers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providersLinkedList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerProvider(
      _providerAddr: PromiseOrValue<string>,
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalJobCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    METASCHEDULER_CONTRACT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    METASCHEDULER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PROVIDER_REGISTRATION_TAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProvider(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasJoined(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    kick(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    providerNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    providers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    providersLinkedList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerProvider(
      _providerAddr: PromiseOrValue<string>,
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalJobCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
