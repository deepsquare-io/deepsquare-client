/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type LabelStruct = {
  key: PromiseOrValue<string>;
  value: PromiseOrValue<string>;
};

export type LabelStructOutput = [string, string] & {
  key: string;
  value: string;
};

export type ProviderHardwareStruct = {
  nodes: PromiseOrValue<BigNumberish>;
  gpus: PromiseOrValue<BigNumberish>;
  cpus: PromiseOrValue<BigNumberish>;
  mem: PromiseOrValue<BigNumberish>;
};

export type ProviderHardwareStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & { nodes: BigNumber; gpus: BigNumber; cpus: BigNumber; mem: BigNumber };

export type ProviderPricesStruct = {
  gpuPricePerMin: PromiseOrValue<BigNumberish>;
  cpuPricePerMin: PromiseOrValue<BigNumberish>;
  memPricePerMin: PromiseOrValue<BigNumberish>;
};

export type ProviderPricesStructOutput = [BigNumber, BigNumber, BigNumber] & {
  gpuPricePerMin: BigNumber;
  cpuPricePerMin: BigNumber;
  memPricePerMin: BigNumber;
};

export interface ProviderManagerInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "METASCHEDULER_CONTRACT_ROLE()": FunctionFragment;
    "METASCHEDULER_ROLE()": FunctionFragment;
    "PROVIDER_REGISTRATION_TAX()": FunctionFragment;
    "addHead(bytes32)": FunctionFragment;
    "addTail(bytes32)": FunctionFragment;
    "approve(address)": FunctionFragment;
    "ban(address)": FunctionFragment;
    "elementCount()": FunctionFragment;
    "fetchPage(uint256,uint256)": FunctionFragment;
    "findIdForDataFrom(bytes32,uint256)": FunctionFragment;
    "get(uint256)": FunctionFragment;
    "getAllTag(address)": FunctionFragment;
    "getJobCount(address)": FunctionFragment;
    "getProviderHardware(address)": FunctionFragment;
    "getProviderPrices(address)": FunctionFragment;
    "getProviderStatus(address)": FunctionFragment;
    "getProviderWalletAddr(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTag(address,string)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasJoined(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "head()": FunctionFragment;
    "idCounter()": FunctionFragment;
    "incJobCount(address)": FunctionFragment;
    "insertAfter(uint256,bytes32)": FunctionFragment;
    "insertBefore(uint256,bytes32)": FunctionFragment;
    "kick(address)": FunctionFragment;
    "objects(uint256)": FunctionFragment;
    "providerCount()": FunctionFragment;
    "providers(address)": FunctionFragment;
    "register(uint64,uint64,uint64,uint64,uint256,uint256,uint256,(string,string)[])": FunctionFragment;
    "registerProvider(address,uint64,uint64,uint64,uint64,uint256,uint256,uint256,(string,string)[])": FunctionFragment;
    "reinstated(address)": FunctionFragment;
    "remove(address)": FunctionFragment;
    "remove(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tail()": FunctionFragment;
    "totalJobCount()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "METASCHEDULER_CONTRACT_ROLE"
      | "METASCHEDULER_ROLE"
      | "PROVIDER_REGISTRATION_TAX"
      | "addHead"
      | "addTail"
      | "approve"
      | "ban"
      | "elementCount"
      | "fetchPage"
      | "findIdForDataFrom"
      | "get"
      | "getAllTag"
      | "getJobCount"
      | "getProviderHardware"
      | "getProviderPrices"
      | "getProviderStatus"
      | "getProviderWalletAddr"
      | "getRoleAdmin"
      | "getTag"
      | "grantRole"
      | "hasJoined"
      | "hasRole"
      | "head"
      | "idCounter"
      | "incJobCount"
      | "insertAfter"
      | "insertBefore"
      | "kick"
      | "objects"
      | "providerCount"
      | "providers"
      | "register"
      | "registerProvider"
      | "reinstated"
      | "remove(address)"
      | "remove(uint256)"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "tail"
      | "totalJobCount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "METASCHEDULER_CONTRACT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "METASCHEDULER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROVIDER_REGISTRATION_TAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addHead",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTail",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ban",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "elementCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchPage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "findIdForDataFrom",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "get",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTag",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderHardware",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderPrices",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderWalletAddr",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTag",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasJoined",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "head", values?: undefined): string;
  encodeFunctionData(functionFragment: "idCounter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "incJobCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "insertAfter",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "insertBefore",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "kick",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "objects",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "providerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "providers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      LabelStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProvider",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      LabelStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reinstated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "remove(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "remove(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "tail", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalJobCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "METASCHEDULER_CONTRACT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "METASCHEDULER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROVIDER_REGISTRATION_TAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addHead", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTail", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ban", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "elementCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fetchPage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findIdForDataFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAllTag", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getJobCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderHardware",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderWalletAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasJoined", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "head", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idCounter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incJobCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insertAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insertBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "objects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "providerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "providers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reinstated", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remove(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tail", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalJobCount",
    data: BytesLike
  ): Result;

  events: {
    "HardwareUpdatedEvent(address)": EventFragment;
    "NewHead(uint256)": EventFragment;
    "NewTail(uint256)": EventFragment;
    "ObjectCreated(uint256,bytes32)": EventFragment;
    "ObjectRemoved(uint256)": EventFragment;
    "ObjectsLinked(uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "ToBeApproved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HardwareUpdatedEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewHead"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ObjectCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ObjectRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ObjectsLinked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ToBeApproved"): EventFragment;
}

export interface HardwareUpdatedEventEventObject {
  _providerAddr: string;
}
export type HardwareUpdatedEventEvent = TypedEvent<
  [string],
  HardwareUpdatedEventEventObject
>;

export type HardwareUpdatedEventEventFilter =
  TypedEventFilter<HardwareUpdatedEventEvent>;

export interface NewHeadEventObject {
  id: BigNumber;
}
export type NewHeadEvent = TypedEvent<[BigNumber], NewHeadEventObject>;

export type NewHeadEventFilter = TypedEventFilter<NewHeadEvent>;

export interface NewTailEventObject {
  id: BigNumber;
}
export type NewTailEvent = TypedEvent<[BigNumber], NewTailEventObject>;

export type NewTailEventFilter = TypedEventFilter<NewTailEvent>;

export interface ObjectCreatedEventObject {
  id: BigNumber;
  data: string;
}
export type ObjectCreatedEvent = TypedEvent<
  [BigNumber, string],
  ObjectCreatedEventObject
>;

export type ObjectCreatedEventFilter = TypedEventFilter<ObjectCreatedEvent>;

export interface ObjectRemovedEventObject {
  id: BigNumber;
}
export type ObjectRemovedEvent = TypedEvent<
  [BigNumber],
  ObjectRemovedEventObject
>;

export type ObjectRemovedEventFilter = TypedEventFilter<ObjectRemovedEvent>;

export interface ObjectsLinkedEventObject {
  prev: BigNumber;
  next: BigNumber;
}
export type ObjectsLinkedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ObjectsLinkedEventObject
>;

export type ObjectsLinkedEventFilter = TypedEventFilter<ObjectsLinkedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface ToBeApprovedEventObject {
  _providerAddr: string;
}
export type ToBeApprovedEvent = TypedEvent<[string], ToBeApprovedEventObject>;

export type ToBeApprovedEventFilter = TypedEventFilter<ToBeApprovedEvent>;

export interface IProviderManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IProviderManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    METASCHEDULER_CONTRACT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    METASCHEDULER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PROVIDER_REGISTRATION_TAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    addHead(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTail(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ban(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    elementCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    fetchPage(
      cursor: PromiseOrValue<BigNumberish>,
      howMany: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber, BigNumber] & {
        data: string[];
        actualLength: BigNumber;
        newCursor: BigNumber;
      }
    >;

    findIdForDataFrom(
      _hash: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    get(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, string]>;

    getAllTag(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LabelStructOutput[]]>;

    getJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProviderHardware(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ProviderHardwareStructOutput]>;

    getProviderPrices(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ProviderPricesStructOutput]>;

    getProviderStatus(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { status: number }>;

    getProviderWalletAddr(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { _walletAddr: string }>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTag(
      _providerAddr: PromiseOrValue<string>,
      tagKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasJoined(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    head(overrides?: CallOverrides): Promise<[BigNumber]>;

    idCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    incJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insertAfter(
      _prevId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insertBefore(
      _nextId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    kick(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    objects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        id: BigNumber;
        next: BigNumber;
        prev: BigNumber;
        data: string;
      }
    >;

    providerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    providers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        ProviderHardwareStructOutput,
        ProviderPricesStructOutput,
        number,
        BigNumber,
        boolean
      ] & {
        walletAddr: string;
        providerHardware: ProviderHardwareStructOutput;
        providerPrices: ProviderPricesStructOutput;
        status: number;
        jobCount: BigNumber;
        valid: boolean;
      }
    >;

    register(
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _tags: LabelStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerProvider(
      _providerAddr: PromiseOrValue<string>,
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _tags: LabelStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reinstated(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "remove(address)"(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "remove(uint256)"(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tail(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalJobCount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  METASCHEDULER_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

  METASCHEDULER_ROLE(overrides?: CallOverrides): Promise<string>;

  PROVIDER_REGISTRATION_TAX(overrides?: CallOverrides): Promise<BigNumber>;

  addHead(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTail(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ban(
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  elementCount(overrides?: CallOverrides): Promise<BigNumber>;

  fetchPage(
    cursor: PromiseOrValue<BigNumberish>,
    howMany: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber, BigNumber] & {
      data: string[];
      actualLength: BigNumber;
      newCursor: BigNumber;
    }
  >;

  findIdForDataFrom(
    _hash: PromiseOrValue<BytesLike>,
    _from: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, string]>;

  getAllTag(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LabelStructOutput[]>;

  getJobCount(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProviderHardware(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ProviderHardwareStructOutput>;

  getProviderPrices(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ProviderPricesStructOutput>;

  getProviderStatus(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getProviderWalletAddr(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTag(
    _providerAddr: PromiseOrValue<string>,
    tagKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasJoined(
    _providerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  head(overrides?: CallOverrides): Promise<BigNumber>;

  idCounter(overrides?: CallOverrides): Promise<BigNumber>;

  incJobCount(
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  insertAfter(
    _prevId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  insertBefore(
    _nextId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  kick(
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  objects(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      id: BigNumber;
      next: BigNumber;
      prev: BigNumber;
      data: string;
    }
  >;

  providerCount(overrides?: CallOverrides): Promise<BigNumber>;

  providers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      ProviderHardwareStructOutput,
      ProviderPricesStructOutput,
      number,
      BigNumber,
      boolean
    ] & {
      walletAddr: string;
      providerHardware: ProviderHardwareStructOutput;
      providerPrices: ProviderPricesStructOutput;
      status: number;
      jobCount: BigNumber;
      valid: boolean;
    }
  >;

  register(
    _nNodes: PromiseOrValue<BigNumberish>,
    _gpus: PromiseOrValue<BigNumberish>,
    _cpus: PromiseOrValue<BigNumberish>,
    _mem: PromiseOrValue<BigNumberish>,
    _gpuPricePerMin: PromiseOrValue<BigNumberish>,
    _cpuPricePerMin: PromiseOrValue<BigNumberish>,
    _memPricePerMin: PromiseOrValue<BigNumberish>,
    _tags: LabelStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerProvider(
    _providerAddr: PromiseOrValue<string>,
    _nNodes: PromiseOrValue<BigNumberish>,
    _gpus: PromiseOrValue<BigNumberish>,
    _cpus: PromiseOrValue<BigNumberish>,
    _mem: PromiseOrValue<BigNumberish>,
    _gpuPricePerMin: PromiseOrValue<BigNumberish>,
    _cpuPricePerMin: PromiseOrValue<BigNumberish>,
    _memPricePerMin: PromiseOrValue<BigNumberish>,
    _tags: LabelStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reinstated(
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "remove(address)"(
    _providerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "remove(uint256)"(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tail(overrides?: CallOverrides): Promise<BigNumber>;

  totalJobCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    METASCHEDULER_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

    METASCHEDULER_ROLE(overrides?: CallOverrides): Promise<string>;

    PROVIDER_REGISTRATION_TAX(overrides?: CallOverrides): Promise<BigNumber>;

    addHead(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTail(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ban(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    elementCount(overrides?: CallOverrides): Promise<BigNumber>;

    fetchPage(
      cursor: PromiseOrValue<BigNumberish>,
      howMany: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber, BigNumber] & {
        data: string[];
        actualLength: BigNumber;
        newCursor: BigNumber;
      }
    >;

    findIdForDataFrom(
      _hash: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, string]>;

    getAllTag(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LabelStructOutput[]>;

    getJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderHardware(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ProviderHardwareStructOutput>;

    getProviderPrices(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ProviderPricesStructOutput>;

    getProviderStatus(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getProviderWalletAddr(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTag(
      _providerAddr: PromiseOrValue<string>,
      tagKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasJoined(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    head(overrides?: CallOverrides): Promise<BigNumber>;

    idCounter(overrides?: CallOverrides): Promise<BigNumber>;

    incJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    insertAfter(
      _prevId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    insertBefore(
      _nextId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    kick(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    objects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        id: BigNumber;
        next: BigNumber;
        prev: BigNumber;
        data: string;
      }
    >;

    providerCount(overrides?: CallOverrides): Promise<BigNumber>;

    providers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        ProviderHardwareStructOutput,
        ProviderPricesStructOutput,
        number,
        BigNumber,
        boolean
      ] & {
        walletAddr: string;
        providerHardware: ProviderHardwareStructOutput;
        providerPrices: ProviderPricesStructOutput;
        status: number;
        jobCount: BigNumber;
        valid: boolean;
      }
    >;

    register(
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _tags: LabelStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerProvider(
      _providerAddr: PromiseOrValue<string>,
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _tags: LabelStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    reinstated(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "remove(address)"(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "remove(uint256)"(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tail(overrides?: CallOverrides): Promise<BigNumber>;

    totalJobCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "HardwareUpdatedEvent(address)"(
      _providerAddr?: null
    ): HardwareUpdatedEventEventFilter;
    HardwareUpdatedEvent(_providerAddr?: null): HardwareUpdatedEventEventFilter;

    "NewHead(uint256)"(id?: null): NewHeadEventFilter;
    NewHead(id?: null): NewHeadEventFilter;

    "NewTail(uint256)"(id?: null): NewTailEventFilter;
    NewTail(id?: null): NewTailEventFilter;

    "ObjectCreated(uint256,bytes32)"(
      id?: null,
      data?: null
    ): ObjectCreatedEventFilter;
    ObjectCreated(id?: null, data?: null): ObjectCreatedEventFilter;

    "ObjectRemoved(uint256)"(id?: null): ObjectRemovedEventFilter;
    ObjectRemoved(id?: null): ObjectRemovedEventFilter;

    "ObjectsLinked(uint256,uint256)"(
      prev?: null,
      next?: null
    ): ObjectsLinkedEventFilter;
    ObjectsLinked(prev?: null, next?: null): ObjectsLinkedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "ToBeApproved(address)"(_providerAddr?: null): ToBeApprovedEventFilter;
    ToBeApproved(_providerAddr?: null): ToBeApprovedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    METASCHEDULER_CONTRACT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    METASCHEDULER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PROVIDER_REGISTRATION_TAX(overrides?: CallOverrides): Promise<BigNumber>;

    addHead(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTail(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ban(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    elementCount(overrides?: CallOverrides): Promise<BigNumber>;

    fetchPage(
      cursor: PromiseOrValue<BigNumberish>,
      howMany: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findIdForDataFrom(
      _hash: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllTag(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderHardware(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderPrices(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderStatus(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderWalletAddr(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTag(
      _providerAddr: PromiseOrValue<string>,
      tagKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasJoined(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    head(overrides?: CallOverrides): Promise<BigNumber>;

    idCounter(overrides?: CallOverrides): Promise<BigNumber>;

    incJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    insertAfter(
      _prevId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    insertBefore(
      _nextId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    kick(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    objects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providerCount(overrides?: CallOverrides): Promise<BigNumber>;

    providers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _tags: LabelStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerProvider(
      _providerAddr: PromiseOrValue<string>,
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _tags: LabelStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reinstated(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "remove(address)"(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "remove(uint256)"(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tail(overrides?: CallOverrides): Promise<BigNumber>;

    totalJobCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    METASCHEDULER_CONTRACT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    METASCHEDULER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PROVIDER_REGISTRATION_TAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addHead(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTail(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ban(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    elementCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchPage(
      cursor: PromiseOrValue<BigNumberish>,
      howMany: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findIdForDataFrom(
      _hash: PromiseOrValue<BytesLike>,
      _from: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllTag(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderHardware(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderPrices(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderStatus(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderWalletAddr(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTag(
      _providerAddr: PromiseOrValue<string>,
      tagKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasJoined(
      _providerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    head(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incJobCount(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    insertAfter(
      _prevId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    insertBefore(
      _nextId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    kick(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    objects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    providerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    providers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _tags: LabelStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerProvider(
      _providerAddr: PromiseOrValue<string>,
      _nNodes: PromiseOrValue<BigNumberish>,
      _gpus: PromiseOrValue<BigNumberish>,
      _cpus: PromiseOrValue<BigNumberish>,
      _mem: PromiseOrValue<BigNumberish>,
      _gpuPricePerMin: PromiseOrValue<BigNumberish>,
      _cpuPricePerMin: PromiseOrValue<BigNumberish>,
      _memPricePerMin: PromiseOrValue<BigNumberish>,
      _tags: LabelStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reinstated(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "remove(address)"(
      _providerAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "remove(uint256)"(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tail(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalJobCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
